// tslint:disable
/**
 * Good Bad Reviews
 * Good Bad Reviews
 *
 * OpenAPI spec version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  Review,
  ReviewFromJSON,
  ReviewToJSON,
  ReviewParams,
  ReviewParamsFromJSON,
  ReviewParamsToJSON,
  ValidationError,
  ValidationErrorFromJSON,
  ValidationErrorToJSON
} from "../models";

export interface CreateReviewRequest {
  reviewParams: ReviewParams;
}

/**
 * no description
 */
export class ReviewApi extends runtime.BaseAPI {
  /**
   * Create review
   */
  async createReviewRaw(
    requestParameters: CreateReviewRequest
  ): Promise<runtime.ApiResponse<Array<Review>>> {
    if (
      requestParameters.reviewParams === null ||
      requestParameters.reviewParams === undefined
    ) {
      throw new runtime.RequiredError(
        "reviewParams",
        "Required parameter requestParameters.reviewParams was null or undefined when calling createReview."
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/reviews`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ReviewParamsToJSON(requestParameters.reviewParams)
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ReviewFromJSON)
    );
  }

  /**
   * Create review
   */
  async createReview(
    requestParameters: CreateReviewRequest
  ): Promise<Array<Review>> {
    const response = await this.createReviewRaw(requestParameters);
    return await response.value();
  }

  /**
   * List reviews
   */
  async listReviewsRaw(): Promise<runtime.ApiResponse<Array<Review>>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/reviews`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ReviewFromJSON)
    );
  }

  /**
   * List reviews
   */
  async listReviews(): Promise<Array<Review>> {
    const response = await this.listReviewsRaw();
    return await response.value();
  }
}
